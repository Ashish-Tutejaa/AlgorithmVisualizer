{"version":3,"sources":["Graph.js","BFS.js","MergeSort.js","serviceWorker.js","index.js"],"names":["Matrix","data","handleDrag","map","ele","i","key","one","j","name","length","onClick","id","className","React","Component","ShowArray","dialogue","colors","col_getter","colDict","finArr","reduce","acc","cur","push","message","style","backgroundColor","ii","Banner","MergeContent","setValue","inputVal","array","setNewArray","useState","arrays","setArrays","count","setCount","setColors","useEffect","undefined","tree","m_sort","globalArr","start","end","len","me","s","e","0","l","r","m","Math","floor","k","left","right","col","renderArr","traverse","arr","direc","mycount","first","second","change","t","newColor","random","disabled","placeholder","value","onChange","target","MergeSort","setArray","split","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.da0b40c4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Matrix({data,handleDrag}){\r\n    return <table>\r\n            <tbody>\r\n            {\r\n                data.map((ele,i) => {\r\n                    return <tr key={i}>{\r\n                        ele.map((one,j) => {\r\n                            let name = \" \";\r\n                            if(one === 0)\r\n                                name = name + \"white\";\r\n                            else if(one === 1) \r\n                                name = name + \"gray\";\r\n                            else if(one === 2)\r\n                                name = name + \"green\";\r\n                            else if(one === 3)\r\n                                name = name + \"golden\";\r\n                            \r\n                            if(i+j === 0)\r\n                                name = name + ' start';\r\n                            if(i === data.length - 1 && j === ele.length - 1)  \r\n                                name = name + ' end';\r\n\r\n                            return <td key={100*i + j} onClick={handleDrag} id={`${i},${j}`}className={name}>{\r\n                            }</td>\r\n                        })\r\n                    }</tr>\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n}\r\n\r\nexport default class Graph extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        let t = [], b = [];\r\n        for(let i = 0 ; i<50 ; i++)\r\n            t.push(0);\r\n        \r\n        for(let i = 0 ; i<20 ; i++){\r\n            b.push([...t]);\r\n        }\r\n        this.state = {board : b};\r\n        this.vis = JSON.parse(JSON.stringify(this.state.board));\r\n        this.vis[0][0] = 2;\r\n        this.vis[19][49] = 2;\r\n        this.stack = [];\r\n        this.n = 50;\r\n        this.m = 20;\r\n        this.timer = 50;\r\n        this.toggleState = this.toggleState.bind(this);\r\n    }\r\n\r\n    check(i,j){\r\n        // console.log('CHECKING',this);\r\n        // console.log(i,j);\r\n        let cond = false;\r\n        if((i + j) === 0)\r\n            cond = true;\r\n        else \r\n            cond = (i>=0 && j>=0 && i<this.m && j<this.n && this.vis[i][j] === 0);\r\n        return (i>=0 && j>=0 && i<this.m && j<this.n && this.state.board[i][j] === 0 && cond);\r\n    }\r\n\r\n    pushChildren(i,j){\r\n        let xd = [-1,1,0,0];\r\n        let yd = [0,0,1,-1];\r\n        let swaps = [], perm = [0,1,2,3];\r\n        for(let i = 0 ; i<100 ; i++){\r\n            swaps.push([Math.floor(Math.random()*3),Math.floor(Math.random()*3)])\r\n        }\r\n        for(let i = 0 ; i<100 ; i++)\r\n            {\r\n            let t = perm[swaps[i][0]];\r\n            perm[swaps[i][0]] = perm[swaps[i][1]];\r\n            perm[swaps[i][1]] = t;\r\n            }\r\n        for(let k = 0 ; k<4 ; k++){\r\n            if(this.check(xd[perm[k]] + i, yd[perm[k]] + j)){\r\n                this.stack.push([xd[perm[k]] + i, yd[perm[k]] + j, i, j]);\r\n            }\r\n        }\r\n    // console.log('pushed', this.stack);\r\n    }\r\n\r\n    dfs(found){\r\n        // console.log('dsfing...');\r\n        let [x,y,parx,pary] = this.stack[this.stack.length - 1];\r\n        if(found === true){\r\n            while(this.vis[x][y] !== 2){\r\n                this.stack.pop();\r\n                x = this.stack[this.stack.length - 1][0];\r\n                y = this.stack[this.stack.length - 1][1];\r\n                parx = this.stack[this.stack.length - 1][2];\r\n                pary = this.stack[this.stack.length - 1][3];\r\n            }\r\n        }\r\n        if(this.vis[x][y] === 1){\r\n            this.stack.pop();\r\n\r\n            this.setState((s) => {\r\n                let t = JSON.parse(JSON.stringify(s.board));\r\n                t[x][y] = 0;\r\n                return {board : t};\r\n            }, () => {\r\n                setTimeout(() => {\r\n                    this.dfs(found);\r\n                }, this.timer);\r\n            })\r\n\r\n        } else if(this.vis[x][y] === 2 && (x+y > 0)){\r\n            this.stack.pop();\r\n            this.vis[parx][pary] = 2;\r\n            this.setState((s) => {\r\n                let t = JSON.parse(JSON.stringify(s.board));\r\n                t[x][y] = 3;\r\n                return {board : t};\r\n            }, () => {\r\n                setTimeout(() => {\r\n                    this.dfs(true);\r\n                }, this.timer);\r\n            })\r\n        }else if(this.check(x,y)){\r\n            //push children to stack.\r\n            // let that = this;\r\n            this.pushChildren(x,y);\r\n            this.vis[x][y] = 1;\r\n            this.setState((s) => {\r\n                let t = JSON.parse(JSON.stringify(s.board));\r\n                t[x][y] = 2;\r\n                return {board : t};\r\n            }, () => {\r\n                setTimeout(() => {\r\n                    this.dfs(found);\r\n                }, this.timer);\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleState(e){\r\n        // console.log('idhar');\r\n        let [x,y] = e.target.id.split(\",\").map(ele => parseInt(ele,10));\r\n        if(x + y === 0)\r\n            return;\r\n        if(x === this.n - 1 && y === this.m - 1)\r\n            return;  \r\n        // console.log(x,y);\r\n        this.setState((s) => {\r\n            let t = JSON.parse(JSON.stringify(s.board));\r\n            t[x][y] = (t[x][y] === 1 ? 0 : 1);\r\n            return {board : t}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (<>\r\n            <h1>DFS</h1>\r\n            <Matrix data={this.state.board} handleDrag={(e) => {this.toggleState(e)}}/>\r\n            <button onClick={() => {\r\n                // console.log(this.stack);\r\n                this.stack.push([0,0,-1,-1]);\r\n                // console.log(this.stack);\r\n                this.dfs(false);\r\n            }}>start</button>\r\n        </>)\r\n    }\r\n\r\n}","import React from 'react'\r\n\r\nfunction Matrix({data,handleDrag}){\r\n    return <table>\r\n            <tbody>\r\n            {\r\n                data.map((ele,i) => {\r\n                    return <tr key={i}>{\r\n                        ele.map((one,j) => {\r\n                            let name = \" \";\r\n                            if(one === 0)\r\n                                name = name + \"white\";\r\n                            else if(one === 1) \r\n                                name = name + \"gray\";\r\n                            else if(one === 2)\r\n                                name = name + \"green\";\r\n                            else if(one === 3)\r\n                                name = name + \"golden\";\r\n                            \r\n                            if(i+j === 0)\r\n                                name = name + ' start';\r\n                            if(i === data.length - 1 && j === ele.length - 1)  \r\n                                name = name + ' end';\r\n\r\n                            return <td key={100*i + j} onClick={handleDrag} id={`${i},${j}`}className={name}>{\r\n                            }</td>\r\n                        })\r\n                    }</tr>\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n}\r\n\r\nexport default class BFS extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        let t = [], b = [], vis = [], vt = [];\r\n        for(let i = 0 ; i<50 ; i++){\r\n            t.push(0);\r\n            vt.push([]);\r\n        }\r\n        \r\n        for(let i = 0 ; i<20 ; i++){\r\n            b.push([...t]);\r\n            vis.push([...vt]);\r\n        }\r\n        this.state = {board : b};\r\n        this.vis = vis;\r\n        this.stack = [];\r\n        this.n = 50;\r\n        this.m = 20;\r\n        this.timer = 100;\r\n        this.toggleState = this.toggleState.bind(this);\r\n    }\r\n\r\n    check(i,j){\r\n        return (i>=0 && j>=0 && i<this.m && j<this.n && this.state.board[i][j] === 0 && this.vis[i][j].length === 0);\r\n    }\r\n\r\n    pushChildren(i,j){\r\n        console.log('pushhh')\r\n        let xd = [-1,1,0,0];\r\n        let yd = [0,0,1,-1];\r\n        for(let k = 0 ; k<4 ; k++){\r\n            if(this.check(xd[k] + i, yd[k] + j)){\r\n                this.stack.push([xd[k] + i, yd[k] + j]);\r\n                console.log('actual push', xd[k] + i, yd[k] + j);\r\n                this.vis[xd[k] + i][ yd[k] + j] = [i,j];\r\n            }\r\n        }\r\n    // console.log('pushed', this.stack);\r\n    }\r\n\r\n    bfs(found,par){\r\n        if(found){\r\n            //continue backtrac\r\n            let [x,y] = par;\r\n            if(x === 0 && y === 0)\r\n            return;\r\n            else {\r\n                this.setState((s) => {\r\n                    let t = JSON.parse(JSON.stringify(s.board));\r\n                    t[x][y] = 3;\r\n                    return {board : t};\r\n                }, () => {\r\n                    setTimeout(() => {\r\n                        this.bfs(true,this.vis[x][y]);\r\n                    }, this.timer);\r\n                })\r\n            }\r\n        return;\r\n        }\r\n\r\n        let [x,y] = this.stack[0];\r\n        this.stack.shift();\r\n\r\n\r\n        if(x === 19 && y === 49){\r\n           //backtrack\r\n           this.setState((s) => {\r\n                let t = JSON.parse(JSON.stringify(s.board));\r\n                t[x][y] = 3;\r\n                return {board : t};\r\n            }, () => {\r\n                setTimeout(() => {\r\n                    this.bfs(true,this.vis[x][y]);\r\n                }, this.timer);\r\n            })\r\n            return;\r\n        }\r\n            //push children to stack.\r\n            // let that = this;\r\n            this.pushChildren(x,y);\r\n            this.setState((s) => {\r\n                let t = JSON.parse(JSON.stringify(s.board));\r\n                t[x][y] = 2;\r\n                return {board : t};\r\n            }, () => {\r\n                setTimeout(() => {\r\n                    this.bfs(found);\r\n                }, this.timer);\r\n            })\r\n        \r\n    }\r\n\r\n    toggleState(e){\r\n        // console.log('idhar');\r\n        let [x,y] = e.target.id.split(\",\").map(ele => parseInt(ele,10));\r\n        if(x + y === 0)\r\n            return;\r\n        if(x === this.n - 1 && y === this.m - 1)\r\n            return;  \r\n        // console.log(x,y);\r\n        this.setState((s) => {\r\n            let t = JSON.parse(JSON.stringify(s.board));\r\n            t[x][y] = (t[x][y] === 1 ? 0 : 1);\r\n            return {board : t}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (<>\r\n            <h1>BFS</h1>\r\n            <Matrix data={this.state.board} handleDrag={(e) => {this.toggleState(e)}}/>\r\n            <button onClick={() => {\r\n                // console.log(this.stack);\r\n                this.stack.push([0,0]);\r\n                // console.log(this.stack);\r\n                this.bfs(false);\r\n            }}>start</button>\r\n        </>)\r\n    }\r\n\r\n}","import { render } from '@testing-library/react';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\nimport './MergeSort.css'\r\n\r\nfunction m_sort(globalArr, start,end,len){\r\n    // console.log(start,end);\r\n    let cur = [];\r\n    for(let i = start ; i<=end ; i++)\r\n        cur[i] = globalArr[i];\r\n\r\n    for(let i = 0 ; i<len ; i++){\r\n        if(cur[i] === undefined)\r\n            cur[i] = globalArr[i];\r\n    }\r\n\r\n    let me = {\r\n        s : start,\r\n        e : end,\r\n        0 : [...cur],\r\n    };  \r\n\r\n    if(start === end || start >= end){\r\n        me.l = me.r = null;\r\n        me[\"1\"] = [...cur];\r\n        return me;\r\n    }\r\n\r\n    let m = Math.floor((start + end)/2);\r\n    me.l = m_sort(globalArr, start,m,len);\r\n    me.r = m_sort(globalArr ,m+1,end,len);\r\n\r\n    let left = [], right = [];\r\n    for(let i = start ; i<=m ; i++)\r\n        left.push(globalArr[i]);\r\n    for(let i = m+1 ; i<=end ; i++)\r\n        right.push(globalArr[i]);\r\n\r\n    let i,j,k; i = j = 0; k = start; \r\n    while(i<left.length && j<right.length){\r\n        if(left[i] <= right[j]){\r\n            globalArr[k] = left[i];\r\n            i++;\r\n        }else if(left[i] > right[j]){\r\n            globalArr[k] = right[j];\r\n            j++;\r\n        }\r\n        k++;\r\n    }\r\n    while(i<left.length){\r\n        globalArr[k] = left[i];\r\n        i++;\r\n        k++;\r\n    }\r\n    while(j<right.length){\r\n        globalArr[k] = right[j];\r\n        j++;\r\n        k++;\r\n    }\r\n    cur = [];\r\n    for(let i = start ; i<=end ; i++)\r\n        cur[i] = globalArr[i];\r\n    for(let i = 0 ; i<len ; i++){\r\n        if(cur[i] === undefined)\r\n            cur[i] = globalArr[i];\r\n    }\r\n    me[\"1\"] = [...cur];\r\n    return me;\r\n}\r\n\r\n// function bfs(tree){\r\n//     let q = [tree];\r\n//     let res = [];\r\n//     while(q.length !== 0){\r\n//         console.log(JSON.parse(JSON.stringify(q)));\r\n//         let sz = q.length, t = [], nextLayer = false;\r\n//         for(let i = 0 ; i<sz ; i++){\r\n//             t.push({...q[i]});\r\n//             if(q[i].l || q[i].r)\r\n//                 nextLayer = true;\r\n//         } res.push([...t]);\r\n\r\n//         for(let i = 0 ; i<sz ; i++){\r\n//             if(q[i].l !== null)\r\n//                 q.push({...q[i].l});\r\n//             if(q[i].r !== null)\r\n//                 q.push({...q[i].r});\r\n//             if(q[i].l === null && q[i].r === q[i].l && nextLayer)\r\n//                 q.push({...q[i]});\r\n//             }\r\n//         for(let i = 0 ; i<sz ; i++)\r\n//             q.shift();\r\n//     }\r\n//     return res;\r\n// }\r\n\r\nconst traverse = (tree, col, arr, count, direc) => {\r\n    if(tree === null)\r\n        return count;\r\n\r\n    let mycount = count;\r\n    for(let i = tree.s ; i<=tree.e ; i++)\r\n        col[i] = count;\r\n    let first = [[...tree[\"0\"]], [...col]];\r\n\r\n    if(direc === 'root')\r\n        first.push(0);\r\n    if(direc === 'left')\r\n        first.push(1);\r\n    else if(direc === 'right')\r\n        first.push(2);\r\n    arr.push(first);\r\n    count++;\r\n    count = traverse(tree.l, col, arr, count, 'left');\r\n    count++;\r\n    count = traverse(tree.r, col, arr, count, 'right');\r\n    for(let i = tree.s ; i<=tree.e ; i++)\r\n        col[i] = mycount;\r\n    let second = [[...tree[\"1\"]], [...col]];\r\n    second.push(3);\r\n    arr.push(second);\r\n    return count;\r\n} \r\n\r\nconst ShowArray = ({dialogue, data, colors, colDict:col_getter}) => {\r\n    // console.log(data, colors, dialogue)\r\n    let finArr = data.reduce((acc, cur, i) => {\r\n\r\n        if(acc.length === 0){\r\n            acc.push([i]);\r\n        } else {\r\n            if(colors[acc[acc.length - 1][0]] !== colors[i]){\r\n                acc.push([i]);\r\n            } else {\r\n                acc[acc.length - 1].push(i);\r\n            }\r\n        }\r\n\r\n    return acc;\r\n    }, []);\r\n\r\n    // console.log(\"OVER HERE\", finArr);\r\n\r\n    // finArr = finArr.map(i => i.map(ii => data[ii]));\r\n\r\n    // console.log(finArr);\r\n    //    color: rgba(red, green, blue, alpha)\r\n    const messages = ['Starting the Algorithm', 'Recursing left', 'Recursing right', 'Sorting and returning...'];\r\n    let message = messages[dialogue];\r\n    return <div className='body-wrap'>\r\n            <div className='card-header'>\r\n                <h3>{message}</h3>\r\n            </div>\r\n            <div className='card-body'>\r\n                        {finArr.map(i => (\r\n                        <div style={{backgroundColor : col_getter[colors[i[0]]]}} className='card-wrap'>\r\n                            {i.map(ii => {\r\n\r\n                                // console.log(\"IIIII: \", colors[ii], ii, data[ii], col_getter[colors[ii]]);\r\n                                return <div  className='card-part'>\r\n                                    <h2>{data[ii]}</h2>\r\n                                </div>\r\n                            })}\r\n                        </div>\r\n                        ))}\r\n            </div>\r\n        </div>\r\n}\r\n\r\nconst Banner = () => {\r\n    return <div className='body-wrap'>\r\n        <h3>Please enter an array to get started!</h3>\r\n    </div>\r\n}\r\n\r\nexport const MergeContent = ({setValue, inputVal, array, setNewArray}) => {\r\n\r\n    // console.log(\"OYEEE\",array);\r\n    let [arrays,setArrays] = useState([]);\r\n    let [count, setCount] = useState(0);\r\n    let [colors, setColors] = useState({});\r\n    let [selected, setSelected] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if(array === undefined || array === null || array.length === 0)\r\n            return;\r\n        let tree = m_sort([...array],0,array.length - 1, array.length);\r\n        let col = [];\r\n        for(let i in array)\r\n            col.push(1);\r\n        let renderArr = [], count = 1;\r\n        traverse(tree, col, renderArr, count, 'root');\r\n        setArrays(renderArr);\r\n        // console.log(renderArr);\r\n    },[array]);\r\n\r\n    const change = (i) => {\r\n        // console.log(i,count);\r\n        if(i)\r\n            setCount(count + 1);\r\n        else \r\n            setCount(count - 1);\r\n    }\r\n\r\n    if(arrays.length > 0)\r\n        {\r\n            // console.log(arrays[count][1])\r\n            let t = {...colors};\r\n            let change = false;\r\n            for(let i of arrays[count][1]){\r\n                if(t[i] === undefined){\r\n                    //make new color...\r\n                    change = true;\r\n                    // console.log(\"GENEREATATING NEW COLOUR FOR\", i);\r\n                    let newColor = `rgba(${Math.floor(Math.random()*155)},${Math.floor(Math.random()*155)},${Math.floor(Math.random()*155)},0.75)`;\r\n                    t[i] = newColor;\r\n                }\r\n            }\r\n            if(change)\r\n                setColors(t);\r\n        }\r\n\r\n    // console.log('ANOTHER ONE', arrays);\r\n\r\n    return (\r\n        <>\r\n            {arrays.length > 0 ? <ShowArray dialogue={arrays[count][2]} colDict={colors} data={arrays[count][0]} colors={arrays[count][1]} /> : <Banner/>}\r\n                <button onClick={() => {setCount(0)}}>reset</button>\r\n                {count > 0 ? <button onClick={() => {change(0)}}>prev state</button> : <button disabled>prev state</button>}\r\n                {count < arrays.length - 1 ? <button onClick={() => {change(1)}}>next state</button> : <button disabled>next state</button>}\r\n                {`  `}\r\n                <div className='inputGroup'>\r\n                    <input placeholder='Enter a comma seperated list of integers here!' className='input' value={inputVal} onChange={(e) => {setValue(e.target.value)}}></input>\r\n                    <button onClick={setNewArray}>enter</button>\r\n                </div>\r\n        \r\n        </>\r\n    );\r\n} \r\n\r\nexport const MergeSort = () => {\r\n    let [value, setValue] = useState(\"\");\r\n    let [array, setArray] = useState([]);\r\n\r\n    const setNewArray = () => {\r\n        // console.log('OKAYYYYYYY', value);\r\n        setArray(value.split(',').map(ele => parseInt(ele,10)));\r\n    }\r\n\r\n    return <MergeContent array={array} setNewArray={setNewArray} inputVal={value} setValue={setValue}/>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//eslint-disable-next-line\nimport Graph from './Graph.js'\n//eslint-disable-next-line\nimport BFS from './BFS.js'\nimport {MergeSort} from './MergeSort.js'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MergeSort/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}